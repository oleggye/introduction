#
#Article entity data
#
# JSON
article.json.first.title=What are the most exciting features that are expected to be released in Java 9
article.json.first.authorName=Alex Zhitnitsky
article.json.first.contents=Don\u2019t get distracted by the relative silence around Java 9! The JDK committers are hard at work preparing the next release, which is expected to be generally available in September 2017. Early access builds are already out in the wild and we\u2019re counting down the days for general availability on the Java 9 Countdown website. Today we have a pretty clear picture of the features we can expect in Java 9. If Java 8 could be described as the major release of lambdas, streams and API changes, then Java 9 is all about Jigsaw, jshell, and a collection of under the hood and API updates. In this post we\u2019ve gathered some of the features we believe are the most exciting ones that are targeting Java 9 \u2013 Apart from the usual suspect, project Jigsaw, which took on the mission of breaking down the JRE and bringing modularity to Java\u2019s core components.
#
article.json.second.title=Dependency Injection and Inversion of Control
article.json.second.authorName=Unknown
article.json.second.contents=A Java application \u2014 a loose term that runs the gamut from constrained, embedded applications to n-tier, server-side enterprise applications \u2014 typically consists of objects that collaborate to form the application proper. Thus the objects in an application have dependencies on each other. Although the Java platform provides a wealth of application development functionality, it lacks the means to organize the basic building blocks into a coherent whole, leaving that task to architects and developers. Although you can use design patterns such as Factory, Abstract Factory, Builder, Decorator, and Service Locator to compose the various classes and object instances that make up an application, these patterns are simply that: best practices given a name, with a description of what the pattern does, where to apply it, the problems it addresses, and so forth. Patterns are formalized best practices that you must implement yourself in your application. The Spring Framework Inversion of Control (IoC) component addresses this concern by providing a formalized means of composing disparate components into a fully working application ready for use. The Spring Framework codifies formalized design patterns as first-class objects that you can integrate into your own application(s). Numerous organizations and institutions use the Spring Framework in this manner to engineer robust, maintainable applications.
#
article.json.third.title=Hibernate ORM 5.2.11.Final User Guide: Introduction
article.json.third.authorName=
article.json.third.contents=Working with both Object-Oriented software and Relational Databases can be cumbersome and time consuming. Development costs are significantly higher due to a paradigm mismatch between how data is represented in objects versus relational databases. Hibernate is an Object/Relational Mapping solution for Java environments. The term Object/Relational Mapping refers to the technique of mapping data from an object model representation to a relational data model representation (and visa versa).Hibernate not only takes care of the mapping from Java classes to database tables (and from Java data types to SQL data types), but also provides data query and retrieval facilities. It can significantly reduce development time otherwise spent with manual data handling in SQL and JDBC. Hibernate\u2019s design goal is to relieve the developer from 95% of common data persistence-related programming tasks by eliminating the need for manual, hand-crafted data processing using SQL and JDBC. However, unlike many other persistence solutions, Hibernate does not hide the power of SQL from you and guarantees that your investment in relational technology and knowledge is as valid as always. Hibernate may not be the best solution for data-centric applications that only use stored-procedures to implement the business logic in the database, it is most useful with object-oriented domain models and business logic in the Java-based middle-tier. However, Hibernate can certainly help you to remove or encapsulate vendor-specific SQL code and will help with the common task of result set translation from a tabular representation to a graph of objects.
# TXT
article.txt.first.title=THE FEATURES AND BENEFITS OF ORACLE COHERENCE
article.txt.first.authorName=Jonathan Hult
article.txt.first.contents=Coherence has many meanings across different domains, including physics, mathematics, or computer science. Coherence within computer science may refer to a feature within Parallels Desktop for Mac, a media server, or Oracle Coherence. This blog post is an introduction to Oracle Coherence. Oracle Coherence is an in-memory data grid and distributed caching solution. Coherence enables organizations to predictably scale mission-critical applications by providing fast access to frequently used data. It provides a robust data abstraction layer that brokers the supply and demand of data between applications and data sources. Coherence is composed of many individual nodes or JVMs which work together to provide highly reliable and high speed virtual caching. The complexity of the cluster is completely hidden from the user of the virtual cache. By automatically and dynamically partitioning data, Coherence ensures continuous data availability and transactional integrity, even in the event of a server failure. Simply stated, Oracle Coherence is a peer-to-peer, high availability data grid that supports Extreme Scaling, Increased Performance and Improved Reliability for applications and middleware. These factors are a crucial component to addressing the challenges faced by many applications today, which must grow and scale elastically, reduce back-end load on databases, applications and mainframes and operate in a vast landscape of the Cloud, Shared Services and custom applications all requiring low latency and reliable access to data.
#
article.txt.second.title=Notes on Oracle Coherence.Coherense cache: fast & easy
article.txt.second.authorName=Ricky Ho
article.txt.second.contents=Oracle Coherence is a distributed cache that functionally comparable to Memcached. On top of the basic cache API function, it has some additional capabilities that is attractive for building large scale enterprise applications. The API is based on a Java Map (Hashtable) Interface. It is based on a key/value store semantics where the value can be any Java Serializable object. Coherence allows multiple cache identified by a unique name (which they called a \"named cache\"). The common usage pattern is to locate a cache by its name, and then act on the cache.
# XML
article.xml.first.title=The Java Platform module system
article.xml.first.authorName=Sander Mak
article.xml.first.contents=The defining feature for Java 9 is an all-new module system. When codebases grow larger, the odds of creating complicated, tangled \u201Cspaghetti code\u201D increase exponentially. There are two fundamental problems: It is hard to truly encapsulate code, and there is no notion of explicit dependencies between different parts (JAR files) of a system. Every public class can be accessed by any other public class on the classpath, leading to inadvertent usage of classes that weren't meant to be public API. Furthermore, the classpath itself is problematic: How do you know whether all the required JARs are there, or if there are duplicate entries? The module system addresses both issues.Modular JAR files contain an additional module descriptor. In this module descriptor, dependencies on other modules are expressed through`requires` statements. Additionally, `exports` statements control which packages are accessible to other modules. All non-exported packages are encapsulated in the module by default.
#
article.xml.second.title=Spring Framework - Overview
article.xml.second.authorName=Unknown
article.xml.second.contents=Spring is the most popular application development framework for enterprise Java. Millions of developers around the world use Spring Framework to create high performing, easily testable, and reusable code. Spring framework is an open source Java platform. It was initially written by Rod Johnson and was first released under the Apache 2.0 license in June 2003. Spring is lightweight when it comes to size and transparency. The basic version of Spring framework is around 2MB. The core features of the Spring Framework can be used in developing any Java application, but there are extensions for building web applications on top of the Java EE platform. Spring framework targets to make J2EE development easier to use and promotes good programming practices by enabling a POJO-based programming model.
#
article.xml.third.title=
article.xml.third.authorName=Thorben Janssen
article.xml.third.contents=Fetching multiple entities by their ID is a very common use case. Most developers either implement it with a loop that calls the find method of the EntityManager for each primary key or with a JPQL query that checks all primary key values in an IN clause. The first option requires Hibernate to perform a database query for each primary key. That can create huge performance issues. The second one allows you to fetch all entities with one query and is obviously the better option. Hibernate 5.1 introduced a third option that avoids the issues of the first and is easier to use than the second one. The new MultiIdentifierLoadAccess interface provides a comfortable option to load multiple entities with one query. You just need to call the byMultipleIds method on the Hibernate Session to get a MultiIdentifierLoadAccess interface and provide a list of primary key values to the multiLoad method.
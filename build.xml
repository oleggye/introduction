<?xml version = "1.0"?>
<project name="go-ivy" default="go">
    <property name="jdk.version" value="1.8" />
    <property name="lib.dir" value="lib" />
    <property name="build.dir" value="build" />
    <property name="classes.dir" value="${build.dir}/classes"/>
    <property name="buildTest" value="build/tests"/>
    <property name="jar.dir" value="${build.dir}/jar"/>
    <property name="src.dir" value="src"/>

    <property name="test.dir" value="test"/>

    <property name="ivy.install.version" value="2.0.0-beta1"/>
    <property name="ivy.jar.dir" value="${basedir}/ivy"/>
    <property name="ivy.jar.file" value="${ivy.jar.dir}/ivy.jar"/>
    <property name="build.dir" value="build"/>
    <property name="src.dir" value="src"/>
    <target name="download-ivy" unless="skip.download">
        <mkdir dir="${ivy.jar.dir}"/><!-- download Ivy from web site so that it can be used even without any special installation -->
        <echo message="installing ivy..."/>
        <get src="https://repo1.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar"
             dest="${ivy.jar.file}" usetimestamp="true"/>
    </target><!-- =================================
          target: install-ivy
            this target is not necessary if you put ivy.jar in your ant lib directory
            if you already have ivy in your ant lib, you can simply remove this
            target and the dependency the 'go' target has on it
         ================================= -->
    <target name="install-ivy" depends="download-ivy" description="--> install ivy"><!-- try to load ivy here from local ivy dir, in case the user has not already dropped
    	      it into ant's lib dir (note that the latter copy will always take precedence).
    	      We will not fail as long as local lib dir exists (it may be empty) and
    	      ivy is in at least one of ant's lib dir or the local lib dir. -->
        <path id="ivy.lib.path">
            <fileset dir="${ivy.jar.dir}" includes="*.jar"/>
        </path>
        <taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path"/>
    </target><!-- =================================
          target: go
                    Go ivy, go!
         ================================= -->
    <target name="go" depends="install-ivy, generate-src"
            description="--> resolve dependencies, compile and run the project">
        <echo message="using ivy to resolve commons-lang 2.1..."/><!-- here comes the magic line: asks ivy to resolve a dependency on
             commons-lang 2.1 and to build an ant path with it from its cache  -->
        <ivy:cachepath organisation="commons-lang" module="commons-lang" revision="2.1" pathid="lib.path.id"
                       inline="true"/>
        <echo message="compiling..."/>
        <mkdir dir="${build.dir}"/>
        <javac srcdir="${src.dir}" destdir="${build.dir}" classpathref="lib.path.id"/>
        <echo>
            We are now ready to execute our simple program with its dependency on commons-lang.
            Let's go!
        </echo>
        <java classname="example.Hello">
            <classpath>
                <path refid="lib.path.id"/>
                <path location="${build.dir}"/>
            </classpath>
        </java>
    </target><!-- =================================
          target: generate-src
            'Generates' the class source. It actually just echo a simple java
            source code to a file. In real life this file would already be
            present on your file system, and this target wouldn't be necessary.
         ================================= -->
    <target name="generate-src">
        <mkdir dir="${src.dir}/example"/>
        <echo file="${src.dir}/example/Hello.java">
            package example;

            import org.apache.commons.lang.WordUtils;

            public class Hello {
            public static void main(String[] args) {
            String message = "hello ivy !";
            System.out.println("standard message : " + message);
            System.out.println("capitalized by " + WordUtils.class.getName()
            + " : " + WordUtils.capitalizeFully(message));
            }
            }
        </echo>
    </target><!-- =================================
          target: clean
         ================================= -->
    <target name="clean" description="--> clean the project">
        <delete includeemptydirs="true" quiet="true">
            <fileset dir="${src.dir}"/>
            <fileset dir="${build.dir}"/>
        </delete>
    </target><!-- =================================
          target: clean-ivy
         ================================= -->
    <target name="clean-ivy" description="--> clean the ivy installation">
        <delete dir="${ivy.jar.dir}"/>
    </target><!-- =================================
          target: clean-cache
         ================================= -->
    <target name="clean-cache" depends="install-ivy" description="--> clean the ivy cache">
        <ivy:cleancache/>
    </target>
</project>